{"version":3,"file":"static/js/135.2e51692f.chunk.js","mappings":"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","sources":["Api/Api.js","webpack://goit-react-hw-05-movies/./src/pages/MovieDetails/MovieDetails.module.css?0c24","pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst key = 'b5c9f17b4578fb7f9b4d9d1272c464ac';\nconst URL = `https://api.themoviedb.org/3`;\nconst notFoundImageUrl = 'https://cdn-icons-png.flaticon.com/512/25/25634.png';\nexport const getPopularMovies = async () => {\n  try {\n    const response = await axios.get(\n      `${URL}/trending/movie/day?api_key=${key}&page=${1}`\n    );\n    const { results } = response.data;\n    const films = results.map(film => {\n      const { title, id, overview } = film;\n      return { title, id, overview };\n    });\n    return { films };\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getMoviesById = async id => {\n  try {\n    const response = await axios.get(`${URL}/movie/${id}?api_key=${key}`);\n    const {\n      poster_path,\n      title,\n      release_date,\n      overview,\n      genres,\n      vote_average,\n      vote_count,\n      popularity,\n      original_title,\n    } = response.data;\n    return {\n      poster_path: poster_path\n        ? 'https://image.tmdb.org/t/p/w500' + poster_path\n        : notFoundImageUrl,\n      title,\n      release_date,\n      overview,\n      genres,\n      vote_average,\n      vote_count,\n      popularity,\n      original_title,\n    };\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getMoviesCast = async id => {\n  try {\n    const { data } = await axios.get(\n      `${URL}/movie/${id}/credits?api_key=${key}`\n    );\n\n    return data.cast.map(({ id, name, character, profile_path }) => ({\n      id,\n      name,\n      character,\n      profile_path: profile_path\n        ? 'https://image.tmdb.org/t/p/w500' + profile_path\n        : notFoundImageUrl,\n    }));\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getMovieByQuery = async query => {\n  try {\n    const { data } = await axios.get(\n      `${URL}/search/movie?api_key=${key}&query=${query}`\n    );\n    return data.results.map(({ id, title }) => ({ id, title }));\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getMovieByReviews = async id => {\n  try {\n    const { data } = await axios.get(\n      `${URL}/movie/${id}/reviews?api_key=${key}`\n    );\n    return data.results.map(({ id, author, content }) => ({\n      id,\n      author,\n      content,\n    }));\n  } catch (error) {\n    console.log(error);\n  }\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"img\":\"MovieDetails_img__uOAom\",\"title\":\"MovieDetails_title__cUGs9\",\"container\":\"MovieDetails_container__Ys+c9\",\"button\":\"MovieDetails_button__uXZxd\",\"movieDetails\":\"MovieDetails_movieDetails__EbgQo\",\"infoList\":\"MovieDetails_infoList__KylaC\",\"infoItem\":\"MovieDetails_infoItem__bqSRP\",\"infoText\":\"MovieDetails_infoText__N+-q+\",\"infoName\":\"MovieDetails_infoName__9+xy7\",\"spanVote\":\"MovieDetails_spanVote__rcQXt\",\"spanSlash\":\"MovieDetails_spanSlash__zbQUV\",\"spanVotes\":\"MovieDetails_spanVotes__9AGPQ\",\"navLink\":\"MovieDetails_navLink__uPVwm\",\"item\":\"MovieDetails_item__mbUY+\"};","import { useEffect, useState } from 'react';\nimport { getMoviesById } from '../../Api/Api';\nimport {\n  Link,\n  NavLink,\n  Outlet,\n  useLocation,\n  useParams,\n} from 'react-router-dom';\nimport css from './MovieDetails.module.css';\nimport styled from 'styled-components';\nimport Loader from '../../components/Loader/Loader';\n\nconst StyledLink = styled(NavLink)`\n  &.active {\n    color: orangered;\n  }\n`;\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  console.log(movieId);\n  const [movie, setMovie] = useState({});\n  const location = useLocation();\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n    const fetchDataId = async () => {\n      try {\n        const film = await getMoviesById(movieId);\n        setMovie(film);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchDataId();\n  }, [movieId]);\n\n  const backLinkHref = location.state?.from ?? '/';\n\n  return (\n    <>\n      {loading ? (\n        <Loader />\n      ) : (\n        <div>\n          <Link className={css.button} to={backLinkHref}>\n            &#8592; Go back\n          </Link>\n          <div className={css.container}>\n            <img className={css.img} src={movie.poster_path} alt={movie.name} />\n            <div className={css.movieDetails}>\n              <h1 className={css.title}>{movie.title}</h1>\n              <ul className={css.infoList}>\n                <li className={css.infoItem}>\n                  <p className={css.infoName}>Vote / Votes</p>\n                  <p className={css.infoText}>\n                    <span className={css.spanVotes}>{movie.vote_average}</span>\n                    <span className={css.spanSlash}> / </span>\n                    <span className={css.spanVotes}>{movie.vote_count}</span>\n                  </p>\n                </li>\n                <li className={css.infoItem}>\n                  <p className={css.infoName}>Popularity</p>\n                  <p className={css.infoText}>{movie.popularity}</p>\n                </li>\n\n                <li className={css.infoItem}>\n                  <p className={css.infoName}>Original Title</p>\n                  <p className={css.infoText}>{movie.original_title}</p>\n                </li>\n\n                <li className={css.infoItem}>\n                  <p className={css.infoName}>Genre</p>\n                  <p className={css.infoText}>\n                    {movie.genres &&\n                      movie.genres\n                        .map(({ name }) => {\n                          return name;\n                        })\n                        .join(' ')}\n                  </p>\n                </li>\n              </ul>\n              <p className={css.infoName}>Overview</p>\n              <p>{movie.overview}</p>\n            </div>\n          </div>\n          <ul className={css.item}>\n            <li>\n              <StyledLink\n                className={css.navLink}\n                to=\"cast\"\n                state={{ from: backLinkHref }}\n              >\n                Cast\n              </StyledLink>\n            </li>\n            <li>\n              <StyledLink\n                className={css.navLink}\n                to=\"reviews\"\n                state={{ from: backLinkHref }}\n              >\n                Reviews\n              </StyledLink>\n            </li>\n          </ul>\n          <Outlet />\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["key","URL","notFoundImageUrl","getPopularMovies","axios","response","results","data","films","map","film","title","id","overview","console","log","getMoviesById","poster_path","release_date","genres","vote_average","vote_count","popularity","original_title","getMoviesCast","cast","name","character","profile_path","getMovieByQuery","query","getMovieByReviews","author","content","StyledLink","styled","NavLink","movieId","useParams","useState","movie","setMovie","location","useLocation","loading","setLoading","useEffect","fetchDataId","backLinkHref","state","from","Loader","className","css","to","src","alt","join"],"sourceRoot":""}