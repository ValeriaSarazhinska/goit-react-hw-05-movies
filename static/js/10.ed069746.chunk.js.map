{"version":3,"file":"static/js/10.ed069746.chunk.js","mappings":"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","sources":["Api/Api.js","webpack://goit-react-hw-05-movies/./src/components/MovieList/MovieList.module.css?6db5","components/MovieList/MovieList.jsx","webpack://goit-react-hw-05-movies/./src/components/Searchbar/Searchbar.module.css?8d9e","components/Searchbar/Searchbar.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst key = 'b5c9f17b4578fb7f9b4d9d1272c464ac';\nconst URL = `https://api.themoviedb.org/3`;\nconst notFoundImageUrl = 'https://cdn-icons-png.flaticon.com/512/25/25634.png';\nexport const getPopularMovies = async () => {\n  try {\n    const response = await axios.get(\n      `${URL}/trending/movie/day?api_key=${key}&page=${1}`\n    );\n    const { results } = response.data;\n    const films = results.map(film => {\n      const { title, id, overview } = film;\n      return { title, id, overview };\n    });\n    return { films };\n  } catch (error) {\n    console.log(error);\n  }\n};\nconst getPosterSrc = url =>\n  url ? 'https://image.tmdb.org/t/p/w500' + url : notFoundImageUrl;\n\nexport const getMoviesById = async id => {\n  try {\n    const response = await axios.get(`${URL}/movie/${id}?api_key=${key}`);\n    const {\n      poster_path,\n      title,\n      release_date,\n      overview,\n      genres,\n      vote_average,\n      vote_count,\n      popularity,\n      original_title,\n    } = response.data;\n    return {\n      poster_path: getPosterSrc(poster_path),\n      title,\n      release_date,\n      overview,\n      genres:\n        genres &&\n        genres\n          .map(({ name }) => {\n            return name;\n          })\n          .join(' '),\n      vote_average,\n      vote_count,\n      popularity,\n      original_title,\n    };\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getMoviesCast = async id => {\n  try {\n    const { data } = await axios.get(\n      `${URL}/movie/${id}/credits?api_key=${key}`\n    );\n\n    return data.cast.map(({ id, name, character, profile_path }) => ({\n      id,\n      name,\n      character,\n      profile_path: getPosterSrc(profile_path),\n    }));\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getMovieByQuery = async query => {\n  try {\n    const { data } = await axios.get(\n      `${URL}/search/movie?api_key=${key}&query=${query}`\n    );\n    return data.results.map(({ id, title }) => ({ id, title }));\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getMovieByReviews = async id => {\n  try {\n    const { data } = await axios.get(\n      `${URL}/movie/${id}/reviews?api_key=${key}`\n    );\n    return data.results.map(({ id, author, content }) => ({\n      id,\n      author,\n      content,\n    }));\n  } catch (error) {\n    console.log(error);\n  }\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"MovieList_item__tDivI\",\"list\":\"MovieList_list__yjDCC\",\"navLink\":\"MovieList_navLink__Y0vr9\"};","import css from './MovieList.module.css';\nimport { NavLink } from 'react-router-dom';\n\nexport const MovieList = ({ movies, location }) => {\n  return (\n    <ul className={css.list}>\n      {movies.map(({ id, title }) => {\n        return (\n          <li key={id} className={css.item}>\n            <NavLink\n              className={css.navLink}\n              to={`/movies/${id}`}\n              state={{ from: location }}\n            >\n              {title}\n            </NavLink>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"searchForm\":\"Searchbar_searchForm__Bt5yh\",\"searchFormInput\":\"Searchbar_searchFormInput__k+juR\",\"searchFormButton\":\"Searchbar_searchFormButton__Y7AQk\"};","import { useState } from 'react';\nimport { Notify } from 'notiflix';\nimport css from './Searchbar.module.css';\nimport { useSearchParams } from 'react-router-dom';\n\nexport const Searchbar = () => {\n  const [query, setQuery] = useState('');\n  const [, setSearchParams] = useSearchParams();\n\n  const handleNameChange = event => {\n    setQuery(event.currentTarget.value.toLowerCase());\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (query.trim() === '') {\n      Notify.failure('Enter a query name.');\n      return;\n    }\n    setSearchParams({ query });\n    setQuery('');\n  };\n  return (\n    <form className={css.searchForm} onSubmit={handleSubmit}>\n      <input\n        className={css.searchFormInput}\n        type=\"text\"\n        name=\"name\"\n        value={query}\n        onChange={handleNameChange}\n        autoComplete=\"off\"\n        autoFocus\n        placeholder=\"Search films\"\n      />\n      <button className={css.searchFormButton} type=\"submit\">\n        <span>Search</span>\n      </button>\n    </form>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { Searchbar } from '../../components/Searchbar/Searchbar';\nimport { getMovieByQuery } from '../../Api/Api';\nimport { useLocation, useSearchParams } from 'react-router-dom';\nimport { MovieList } from '../../components/MovieList/MovieList';\nimport { Notify } from 'notiflix';\nimport Loader from '../../components/Loader/Loader';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [searchParams] = useSearchParams();\n  const location = useLocation();\n  const [loading, setLoading] = useState(false);\n\n  const searchRequest = searchParams.get('query');\n\n  useEffect(() => {\n    if (!searchRequest) return;\n    setLoading(true);\n    const fetchName = async () => {\n      try {\n        const film = await getMovieByQuery(searchRequest);\n        if (!film.length) {\n          return Notify.failure(\n            'Sorry, there are no films matching your search query. Please try again.'\n          );\n        }\n        setMovies(film);\n      } catch (error) {\n        Notify.failure('Please try again.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchName();\n  }, [searchRequest]);\n  return (\n    <>\n      <Searchbar />\n      {loading ? <Loader /> : <MovieList movies={movies} location={location} />}\n    </>\n  );\n};\n\nexport default Movies;\n"],"names":["key","URL","getPopularMovies","axios","response","results","data","films","map","film","title","id","overview","console","log","getPosterSrc","url","getMoviesById","poster_path","release_date","genres","vote_average","vote_count","popularity","original_title","name","join","getMoviesCast","cast","character","profile_path","getMovieByQuery","query","getMovieByReviews","author","content","MovieList","movies","location","className","css","to","state","from","Searchbar","useState","setQuery","useSearchParams","setSearchParams","onSubmit","event","preventDefault","trim","Notify","type","value","onChange","currentTarget","toLowerCase","autoComplete","autoFocus","placeholder","setMovies","searchParams","useLocation","loading","setLoading","searchRequest","get","useEffect","fetchName","length","Loader"],"sourceRoot":""}